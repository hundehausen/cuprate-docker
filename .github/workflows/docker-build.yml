name: Build and Push Docker Image

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*.*.*'  # Will trigger on semantic version tags (v1.0.0, v2.1.3, etc.)
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering
  schedule:
    - cron: '0 */4 * * *'  # Run every 4 hours

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CUPRATE_REPO: Cuprate/cuprate

jobs:
  check-for-updates:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      cuprate_commit: ${{ steps.check.outputs.cuprate_commit }}
    steps:
      - name: Check for new commits or tags in Cuprate
        id: check
        run: |
          # Get the latest commit hash from Cuprate repository
          LATEST_COMMIT=$(curl -s "https://api.github.com/repos/${{ env.CUPRATE_REPO }}/commits/main" | jq -r '.sha' | cut -c1-7)
          
          # Get the latest release tag from Cuprate repository
          LATEST_TAG=$(curl -s "https://api.github.com/repos/${{ env.CUPRATE_REPO }}/tags" | jq -r '.[0].name // ""')
          
          # Get the last built commit hash (if exists)
          LAST_BUILT_COMMIT=$(curl -s "https://api.github.com/repos/${{ github.repository }}/actions/workflows/docker-build.yml/runs?status=success&per_page=1" | \
            jq -r '.workflow_runs[0].head_sha // ""')
          
          echo "Latest Cuprate commit: $LATEST_COMMIT"
          echo "Latest Cuprate tag: $LATEST_TAG"
          echo "Last built commit: $LAST_BUILT_COMMIT"
          
          # Determine if we should build
          if [[ -n "$LATEST_TAG" && "$LATEST_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "Found semantic version tag: $LATEST_TAG"
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "cuprate_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          elif [[ "$LATEST_COMMIT" != "$LAST_BUILT_COMMIT" ]]; then
            echo "Found new commit: $LATEST_COMMIT"
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "cuprate_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          else
            echo "No new commits or tags found"
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    needs: check-for-updates
    if: ${{ github.event_name != 'schedule' || needs.check-for-updates.outputs.should_build == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short

      - name: Get Cuprate commit hash
        id: cuprate-commit
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            # Use the commit hash from the check-for-updates job
            CUPRATE_COMMIT="${{ needs.check-for-updates.outputs.cuprate_commit }}"
          else
            # Clone Cuprate repository temporarily to get latest commit hash
            git clone --depth 1 https://github.com/Cuprate/cuprate.git /tmp/cuprate
            cd /tmp/cuprate
            CUPRATE_COMMIT=$(git rev-parse --short HEAD)
          fi
          
          echo "CUPRATE_COMMIT=$CUPRATE_COMMIT" >> $GITHUB_ENV
          echo "cuprate_commit=$CUPRATE_COMMIT" >> $GITHUB_OUTPUT

      - name: Determine Docker tags
        id: docker-tags
        run: |
          # If this is a semantic version tag, use that
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "Using semantic version tag: ${{ steps.meta.outputs.tags }}"
          else
            # Otherwise use latest + short commit hash of cuprate
            echo "Using Cuprate commit hash: ${{ steps.cuprate-commit.outputs.cuprate_commit }}"
            echo "ADDITIONAL_TAGS=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.cuprate-commit.outputs.cuprate_commit }}" >> $GITHUB_ENV
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}${{ env.ADDITIONAL_TAGS != '' && format(',{0}', env.ADDITIONAL_TAGS) || '' }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            CACHEBUST=${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    permissions:
      contents: read
      packages: read
      security-events: write # Needed to upload sarif results

    steps:
      - name: Set image name for scanning
        id: image-name
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # Use the semantic tag
            VERSION=${GITHUB_REF#refs/tags/v}
            IMAGE_TAG=$VERSION
          else
            # Use latest tag for non-tag builds
            IMAGE_TAG="latest"
          fi
          
          FULL_IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "FULL_IMAGE_NAME=$FULL_IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker image for scanning
        run: |
          docker pull ${{ steps.image-name.outputs.FULL_IMAGE_NAME }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: ${{ steps.image-name.outputs.FULL_IMAGE_NAME }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'Trivy Container Scan'

      # Also output a human-readable version to the workflow logs
      - name: Run Trivy scan for workflow logs
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: ${{ steps.image-name.outputs.FULL_IMAGE_NAME }}
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
